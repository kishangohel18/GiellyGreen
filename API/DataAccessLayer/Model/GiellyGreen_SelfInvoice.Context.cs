

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


namespace DataAccessLayer.Model
{

using System;
using System.Data.Entity;
using System.Data.Entity.Infrastructure;

using System.Data.Entity.Core.Objects;
using System.Linq;


public partial class GiellyGreen_SelfInvoiceEntities : DbContext
{
    public GiellyGreen_SelfInvoiceEntities()
        : base("name=GiellyGreen_SelfInvoiceEntities")
    {

    }

    protected override void OnModelCreating(DbModelBuilder modelBuilder)
    {
        throw new UnintentionalCodeFirstException();
    }


    public virtual DbSet<Invoice> Invoices { get; set; }

    public virtual DbSet<Month_Header> Month_Header { get; set; }

    public virtual DbSet<Supplier> Suppliers { get; set; }

    public virtual DbSet<CompanyProfile> CompanyProfiles { get; set; }


    public virtual int ApproveSelectedInvoice(Nullable<int> invoiceId)
    {

        var invoiceIdParameter = invoiceId.HasValue ?
            new ObjectParameter("InvoiceId", invoiceId) :
            new ObjectParameter("InvoiceId", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ApproveSelectedInvoice", invoiceIdParameter);
    }


    public virtual ObjectResult<DeleteSupplier_Result> DeleteSupplier(Nullable<int> supplierId)
    {

        var supplierIdParameter = supplierId.HasValue ?
            new ObjectParameter("SupplierId", supplierId) :
            new ObjectParameter("SupplierId", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DeleteSupplier_Result>("DeleteSupplier", supplierIdParameter);
    }


    public virtual ObjectResult<GetAllInvoiceByDate_Result> GetAllInvoiceByDate(Nullable<int> invoiceMonth, Nullable<int> invoiceYear)
    {

        var invoiceMonthParameter = invoiceMonth.HasValue ?
            new ObjectParameter("InvoiceMonth", invoiceMonth) :
            new ObjectParameter("InvoiceMonth", typeof(int));


        var invoiceYearParameter = invoiceYear.HasValue ?
            new ObjectParameter("InvoiceYear", invoiceYear) :
            new ObjectParameter("InvoiceYear", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllInvoiceByDate_Result>("GetAllInvoiceByDate", invoiceMonthParameter, invoiceYearParameter);
    }


    public virtual ObjectResult<GetAllSupplier_Result> GetAllSupplier(Nullable<int> id)
    {

        var idParameter = id.HasValue ?
            new ObjectParameter("id", id) :
            new ObjectParameter("id", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllSupplier_Result>("GetAllSupplier", idParameter);
    }


    public virtual ObjectResult<GetInvoiceByDate_Result> GetInvoiceByDate(Nullable<int> invoiceMonth, Nullable<int> invoiceYear)
    {

        var invoiceMonthParameter = invoiceMonth.HasValue ?
            new ObjectParameter("InvoiceMonth", invoiceMonth) :
            new ObjectParameter("InvoiceMonth", typeof(int));


        var invoiceYearParameter = invoiceYear.HasValue ?
            new ObjectParameter("InvoiceYear", invoiceYear) :
            new ObjectParameter("InvoiceYear", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetInvoiceByDate_Result>("GetInvoiceByDate", invoiceMonthParameter, invoiceYearParameter);
    }


    public virtual ObjectResult<InsertUpdateMonthHeader_Result> InsertUpdateMonthHeader(Nullable<int> id, string invoiceRefrance, string custom1, string custom2, string custom3, string custom4, string custom5, Nullable<int> invoiceMonth, Nullable<int> invoiceYear, Nullable<System.DateTime> invoiceDate, Nullable<decimal> vatPercentage)
    {

        var idParameter = id.HasValue ?
            new ObjectParameter("Id", id) :
            new ObjectParameter("Id", typeof(int));


        var invoiceRefranceParameter = invoiceRefrance != null ?
            new ObjectParameter("InvoiceRefrance", invoiceRefrance) :
            new ObjectParameter("InvoiceRefrance", typeof(string));


        var custom1Parameter = custom1 != null ?
            new ObjectParameter("Custom1", custom1) :
            new ObjectParameter("Custom1", typeof(string));


        var custom2Parameter = custom2 != null ?
            new ObjectParameter("Custom2", custom2) :
            new ObjectParameter("Custom2", typeof(string));


        var custom3Parameter = custom3 != null ?
            new ObjectParameter("Custom3", custom3) :
            new ObjectParameter("Custom3", typeof(string));


        var custom4Parameter = custom4 != null ?
            new ObjectParameter("Custom4", custom4) :
            new ObjectParameter("Custom4", typeof(string));


        var custom5Parameter = custom5 != null ?
            new ObjectParameter("Custom5", custom5) :
            new ObjectParameter("Custom5", typeof(string));


        var invoiceMonthParameter = invoiceMonth.HasValue ?
            new ObjectParameter("InvoiceMonth", invoiceMonth) :
            new ObjectParameter("InvoiceMonth", typeof(int));


        var invoiceYearParameter = invoiceYear.HasValue ?
            new ObjectParameter("InvoiceYear", invoiceYear) :
            new ObjectParameter("InvoiceYear", typeof(int));


        var invoiceDateParameter = invoiceDate.HasValue ?
            new ObjectParameter("InvoiceDate", invoiceDate) :
            new ObjectParameter("InvoiceDate", typeof(System.DateTime));


        var vatPercentageParameter = vatPercentage.HasValue ?
            new ObjectParameter("VatPercentage", vatPercentage) :
            new ObjectParameter("VatPercentage", typeof(decimal));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<InsertUpdateMonthHeader_Result>("InsertUpdateMonthHeader", idParameter, invoiceRefranceParameter, custom1Parameter, custom2Parameter, custom3Parameter, custom4Parameter, custom5Parameter, invoiceMonthParameter, invoiceYearParameter, invoiceDateParameter, vatPercentageParameter);
    }


    public virtual ObjectResult<InsertUpdateSupplier_Result> InsertUpdateSupplier(Nullable<int> supplierId, string supplierName, string supplierRef, string businessAddress, string email, string phone, string taxReference, string companyRegNumber, string companyRegAddress, string vatNumber, string logoUrl, Nullable<bool> isActive)
    {

        var supplierIdParameter = supplierId.HasValue ?
            new ObjectParameter("SupplierId", supplierId) :
            new ObjectParameter("SupplierId", typeof(int));


        var supplierNameParameter = supplierName != null ?
            new ObjectParameter("SupplierName", supplierName) :
            new ObjectParameter("SupplierName", typeof(string));


        var supplierRefParameter = supplierRef != null ?
            new ObjectParameter("SupplierRef", supplierRef) :
            new ObjectParameter("SupplierRef", typeof(string));


        var businessAddressParameter = businessAddress != null ?
            new ObjectParameter("BusinessAddress", businessAddress) :
            new ObjectParameter("BusinessAddress", typeof(string));


        var emailParameter = email != null ?
            new ObjectParameter("Email", email) :
            new ObjectParameter("Email", typeof(string));


        var phoneParameter = phone != null ?
            new ObjectParameter("Phone", phone) :
            new ObjectParameter("Phone", typeof(string));


        var taxReferenceParameter = taxReference != null ?
            new ObjectParameter("TaxReference", taxReference) :
            new ObjectParameter("TaxReference", typeof(string));


        var companyRegNumberParameter = companyRegNumber != null ?
            new ObjectParameter("CompanyRegNumber", companyRegNumber) :
            new ObjectParameter("CompanyRegNumber", typeof(string));


        var companyRegAddressParameter = companyRegAddress != null ?
            new ObjectParameter("CompanyRegAddress", companyRegAddress) :
            new ObjectParameter("CompanyRegAddress", typeof(string));


        var vatNumberParameter = vatNumber != null ?
            new ObjectParameter("VatNumber", vatNumber) :
            new ObjectParameter("VatNumber", typeof(string));


        var logoUrlParameter = logoUrl != null ?
            new ObjectParameter("LogoUrl", logoUrl) :
            new ObjectParameter("LogoUrl", typeof(string));


        var isActiveParameter = isActive.HasValue ?
            new ObjectParameter("IsActive", isActive) :
            new ObjectParameter("IsActive", typeof(bool));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<InsertUpdateSupplier_Result>("InsertUpdateSupplier", supplierIdParameter, supplierNameParameter, supplierRefParameter, businessAddressParameter, emailParameter, phoneParameter, taxReferenceParameter, companyRegNumberParameter, companyRegAddressParameter, vatNumberParameter, logoUrlParameter, isActiveParameter);
    }


    public virtual ObjectResult<InsetUpdateInvoices_Result> InsetUpdateInvoices(Nullable<int> id, Nullable<int> monthHeaderId, Nullable<int> supplierId, string supplierName, Nullable<decimal> hairService, Nullable<decimal> beautyService, Nullable<decimal> custom1, Nullable<decimal> custom2, Nullable<decimal> custom3, Nullable<decimal> custom4, Nullable<decimal> custom5, Nullable<decimal> net, Nullable<decimal> vat, Nullable<decimal> gross, Nullable<decimal> advancePaid, Nullable<decimal> balance, Nullable<bool> isApproved)
    {

        var idParameter = id.HasValue ?
            new ObjectParameter("Id", id) :
            new ObjectParameter("Id", typeof(int));


        var monthHeaderIdParameter = monthHeaderId.HasValue ?
            new ObjectParameter("MonthHeaderId", monthHeaderId) :
            new ObjectParameter("MonthHeaderId", typeof(int));


        var supplierIdParameter = supplierId.HasValue ?
            new ObjectParameter("SupplierId", supplierId) :
            new ObjectParameter("SupplierId", typeof(int));


        var supplierNameParameter = supplierName != null ?
            new ObjectParameter("SupplierName", supplierName) :
            new ObjectParameter("SupplierName", typeof(string));


        var hairServiceParameter = hairService.HasValue ?
            new ObjectParameter("HairService", hairService) :
            new ObjectParameter("HairService", typeof(decimal));


        var beautyServiceParameter = beautyService.HasValue ?
            new ObjectParameter("BeautyService", beautyService) :
            new ObjectParameter("BeautyService", typeof(decimal));


        var custom1Parameter = custom1.HasValue ?
            new ObjectParameter("Custom1", custom1) :
            new ObjectParameter("Custom1", typeof(decimal));


        var custom2Parameter = custom2.HasValue ?
            new ObjectParameter("Custom2", custom2) :
            new ObjectParameter("Custom2", typeof(decimal));


        var custom3Parameter = custom3.HasValue ?
            new ObjectParameter("Custom3", custom3) :
            new ObjectParameter("Custom3", typeof(decimal));


        var custom4Parameter = custom4.HasValue ?
            new ObjectParameter("Custom4", custom4) :
            new ObjectParameter("Custom4", typeof(decimal));


        var custom5Parameter = custom5.HasValue ?
            new ObjectParameter("Custom5", custom5) :
            new ObjectParameter("Custom5", typeof(decimal));


        var netParameter = net.HasValue ?
            new ObjectParameter("Net", net) :
            new ObjectParameter("Net", typeof(decimal));


        var vatParameter = vat.HasValue ?
            new ObjectParameter("Vat", vat) :
            new ObjectParameter("Vat", typeof(decimal));


        var grossParameter = gross.HasValue ?
            new ObjectParameter("Gross", gross) :
            new ObjectParameter("Gross", typeof(decimal));


        var advancePaidParameter = advancePaid.HasValue ?
            new ObjectParameter("AdvancePaid", advancePaid) :
            new ObjectParameter("AdvancePaid", typeof(decimal));


        var balanceParameter = balance.HasValue ?
            new ObjectParameter("Balance", balance) :
            new ObjectParameter("Balance", typeof(decimal));


        var isApprovedParameter = isApproved.HasValue ?
            new ObjectParameter("IsApproved", isApproved) :
            new ObjectParameter("IsApproved", typeof(bool));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<InsetUpdateInvoices_Result>("InsetUpdateInvoices", idParameter, monthHeaderIdParameter, supplierIdParameter, supplierNameParameter, hairServiceParameter, beautyServiceParameter, custom1Parameter, custom2Parameter, custom3Parameter, custom4Parameter, custom5Parameter, netParameter, vatParameter, grossParameter, advancePaidParameter, balanceParameter, isApprovedParameter);
    }


    public virtual int UpdateStatus(Nullable<int> supplierId, Nullable<bool> isActive)
    {

        var supplierIdParameter = supplierId.HasValue ?
            new ObjectParameter("SupplierId", supplierId) :
            new ObjectParameter("SupplierId", typeof(int));


        var isActiveParameter = isActive.HasValue ?
            new ObjectParameter("IsActive", isActive) :
            new ObjectParameter("IsActive", typeof(bool));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateStatus", supplierIdParameter, isActiveParameter);
    }


    public virtual ObjectResult<GetActiveSupplier_Result> GetActiveSupplier()
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetActiveSupplier_Result>("GetActiveSupplier");
    }


    public virtual ObjectResult<GetCompanyProfile_Result> GetCompanyProfile()
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCompanyProfile_Result>("GetCompanyProfile");
    }


    public virtual ObjectResult<InsertUpdateCompanyProfile_Result> InsertUpdateCompanyProfile(Nullable<int> profileId, string companyName, string addressLine, string city, string zipcode, string country, Nullable<decimal> defaultVAT)
    {

        var profileIdParameter = profileId.HasValue ?
            new ObjectParameter("ProfileId", profileId) :
            new ObjectParameter("ProfileId", typeof(int));


        var companyNameParameter = companyName != null ?
            new ObjectParameter("CompanyName", companyName) :
            new ObjectParameter("CompanyName", typeof(string));


        var addressLineParameter = addressLine != null ?
            new ObjectParameter("AddressLine", addressLine) :
            new ObjectParameter("AddressLine", typeof(string));


        var cityParameter = city != null ?
            new ObjectParameter("City", city) :
            new ObjectParameter("City", typeof(string));


        var zipcodeParameter = zipcode != null ?
            new ObjectParameter("Zipcode", zipcode) :
            new ObjectParameter("Zipcode", typeof(string));


        var countryParameter = country != null ?
            new ObjectParameter("Country", country) :
            new ObjectParameter("Country", typeof(string));


        var defaultVATParameter = defaultVAT.HasValue ?
            new ObjectParameter("DefaultVAT", defaultVAT) :
            new ObjectParameter("DefaultVAT", typeof(decimal));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<InsertUpdateCompanyProfile_Result>("InsertUpdateCompanyProfile", profileIdParameter, companyNameParameter, addressLineParameter, cityParameter, zipcodeParameter, countryParameter, defaultVATParameter);
    }


    public virtual ObjectResult<GetHeaderByDate_Result> GetHeaderByDate(Nullable<int> currentMonth, Nullable<int> currentYear)
    {

        var currentMonthParameter = currentMonth.HasValue ?
            new ObjectParameter("CurrentMonth", currentMonth) :
            new ObjectParameter("CurrentMonth", typeof(int));


        var currentYearParameter = currentYear.HasValue ?
            new ObjectParameter("CurrentYear", currentYear) :
            new ObjectParameter("CurrentYear", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetHeaderByDate_Result>("GetHeaderByDate", currentMonthParameter, currentYearParameter);
    }


    public virtual ObjectResult<GetInvoiceInfoById_Result> GetInvoiceInfoById(Nullable<int> invoiceId)
    {

        var invoiceIdParameter = invoiceId.HasValue ?
            new ObjectParameter("InvoiceId", invoiceId) :
            new ObjectParameter("InvoiceId", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetInvoiceInfoById_Result>("GetInvoiceInfoById", invoiceIdParameter);
    }


    public virtual ObjectResult<GetHeaderInfoById_Result> GetHeaderInfoById(Nullable<int> headerId)
    {

        var headerIdParameter = headerId.HasValue ?
            new ObjectParameter("HeaderId", headerId) :
            new ObjectParameter("HeaderId", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetHeaderInfoById_Result>("GetHeaderInfoById", headerIdParameter);
    }


    public virtual ObjectResult<GetSupplierInfoById_Result> GetSupplierInfoById(Nullable<int> supplierId)
    {

        var supplierIdParameter = supplierId.HasValue ?
            new ObjectParameter("SupplierId", supplierId) :
            new ObjectParameter("SupplierId", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSupplierInfoById_Result>("GetSupplierInfoById", supplierIdParameter);
    }


    public virtual ObjectResult<GetActiveSupplierInfo_Result> GetActiveSupplierInfo()
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetActiveSupplierInfo_Result>("GetActiveSupplierInfo");
    }


    public virtual ObjectResult<GetInvoicesByMonth_Result> GetInvoicesByMonth(Nullable<int> invoiceMonth, Nullable<int> invoiceYear)
    {

        var invoiceMonthParameter = invoiceMonth.HasValue ?
            new ObjectParameter("InvoiceMonth", invoiceMonth) :
            new ObjectParameter("InvoiceMonth", typeof(int));


        var invoiceYearParameter = invoiceYear.HasValue ?
            new ObjectParameter("InvoiceYear", invoiceYear) :
            new ObjectParameter("InvoiceYear", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetInvoicesByMonth_Result>("GetInvoicesByMonth", invoiceMonthParameter, invoiceYearParameter);
    }

}

}


//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DataAccessLayer.Model
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class GiellyGreen_SelfInvoiceEntities : DbContext
    {
        public GiellyGreen_SelfInvoiceEntities()
            : base("name=GiellyGreen_SelfInvoiceEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<CustomHeader> CustomHeaders { get; set; }
        public virtual DbSet<Monthly_Invoice> Monthly_Invoice { get; set; }
        public virtual DbSet<Supplier> Suppliers { get; set; }
    
        public virtual int ApproveSelectedInvoice(Nullable<int> monthlyInvoiceID)
        {
            var monthlyInvoiceIDParameter = monthlyInvoiceID.HasValue ?
                new ObjectParameter("MonthlyInvoiceID", monthlyInvoiceID) :
                new ObjectParameter("MonthlyInvoiceID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ApproveSelectedInvoice", monthlyInvoiceIDParameter);
        }
    
        public virtual ObjectResult<DeleteConstrainedSupplier_Result> DeleteConstrainedSupplier(Nullable<int> supplierId)
        {
            var supplierIdParameter = supplierId.HasValue ?
                new ObjectParameter("SupplierId", supplierId) :
                new ObjectParameter("SupplierId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DeleteConstrainedSupplier_Result>("DeleteConstrainedSupplier", supplierIdParameter);
        }
    
        public virtual int DeleteSupplierById(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteSupplierById", idParameter);
        }
    
        public virtual ObjectResult<GetAllSupplier_Result> GetAllSupplier(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllSupplier_Result>("GetAllSupplier", idParameter);
        }
    
        public virtual ObjectResult<GetAllSupplierByIsActive_Result> GetAllSupplierByIsActive(Nullable<int> currentMonth, Nullable<int> currentYear)
        {
            var currentMonthParameter = currentMonth.HasValue ?
                new ObjectParameter("CurrentMonth", currentMonth) :
                new ObjectParameter("CurrentMonth", typeof(int));
    
            var currentYearParameter = currentYear.HasValue ?
                new ObjectParameter("CurrentYear", currentYear) :
                new ObjectParameter("CurrentYear", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllSupplierByIsActive_Result>("GetAllSupplierByIsActive", currentMonthParameter, currentYearParameter);
        }
    
        public virtual ObjectResult<GetCustomHeaderByDate_Result> GetCustomHeaderByDate(Nullable<int> currentMonth, Nullable<int> currentYear)
        {
            var currentMonthParameter = currentMonth.HasValue ?
                new ObjectParameter("CurrentMonth", currentMonth) :
                new ObjectParameter("CurrentMonth", typeof(int));
    
            var currentYearParameter = currentYear.HasValue ?
                new ObjectParameter("CurrentYear", currentYear) :
                new ObjectParameter("CurrentYear", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCustomHeaderByDate_Result>("GetCustomHeaderByDate", currentMonthParameter, currentYearParameter);
        }
    
        public virtual ObjectResult<GetInvoiceByMonth_Result> GetInvoiceByMonth(Nullable<int> invoiceMonth, Nullable<int> invoiceYear)
        {
            var invoiceMonthParameter = invoiceMonth.HasValue ?
                new ObjectParameter("InvoiceMonth", invoiceMonth) :
                new ObjectParameter("InvoiceMonth", typeof(int));
    
            var invoiceYearParameter = invoiceYear.HasValue ?
                new ObjectParameter("InvoiceYear", invoiceYear) :
                new ObjectParameter("InvoiceYear", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetInvoiceByMonth_Result>("GetInvoiceByMonth", invoiceMonthParameter, invoiceYearParameter);
        }
    
        public virtual ObjectResult<InsertUpdateCustomHeader_Result> InsertUpdateCustomHeader(Nullable<int> id, string invoiceRefrance, string custom1, string custom2, string custom3, string custom4, string custom5, Nullable<int> currentMonth, Nullable<int> currentYear)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var invoiceRefranceParameter = invoiceRefrance != null ?
                new ObjectParameter("InvoiceRefrance", invoiceRefrance) :
                new ObjectParameter("InvoiceRefrance", typeof(string));
    
            var custom1Parameter = custom1 != null ?
                new ObjectParameter("Custom1", custom1) :
                new ObjectParameter("Custom1", typeof(string));
    
            var custom2Parameter = custom2 != null ?
                new ObjectParameter("Custom2", custom2) :
                new ObjectParameter("Custom2", typeof(string));
    
            var custom3Parameter = custom3 != null ?
                new ObjectParameter("Custom3", custom3) :
                new ObjectParameter("Custom3", typeof(string));
    
            var custom4Parameter = custom4 != null ?
                new ObjectParameter("Custom4", custom4) :
                new ObjectParameter("Custom4", typeof(string));
    
            var custom5Parameter = custom5 != null ?
                new ObjectParameter("Custom5", custom5) :
                new ObjectParameter("Custom5", typeof(string));
    
            var currentMonthParameter = currentMonth.HasValue ?
                new ObjectParameter("CurrentMonth", currentMonth) :
                new ObjectParameter("CurrentMonth", typeof(int));
    
            var currentYearParameter = currentYear.HasValue ?
                new ObjectParameter("CurrentYear", currentYear) :
                new ObjectParameter("CurrentYear", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<InsertUpdateCustomHeader_Result>("InsertUpdateCustomHeader", idParameter, invoiceRefranceParameter, custom1Parameter, custom2Parameter, custom3Parameter, custom4Parameter, custom5Parameter, currentMonthParameter, currentYearParameter);
        }
    
        public virtual ObjectResult<InsertUpdateSupplier_Result> InsertUpdateSupplier(Nullable<int> supplierId, string supplierName, string referenceNumber, string businessAddress, string email, string phone, string taxReference, string companyRegNumber, string companyRegAddress, string vatNumber, Nullable<System.DateTime> createdDate, Nullable<System.DateTime> modifiedDate, string logoUrl, Nullable<bool> isActive, Nullable<bool> isInvoiced)
        {
            var supplierIdParameter = supplierId.HasValue ?
                new ObjectParameter("SupplierId", supplierId) :
                new ObjectParameter("SupplierId", typeof(int));
    
            var supplierNameParameter = supplierName != null ?
                new ObjectParameter("SupplierName", supplierName) :
                new ObjectParameter("SupplierName", typeof(string));
    
            var referenceNumberParameter = referenceNumber != null ?
                new ObjectParameter("ReferenceNumber", referenceNumber) :
                new ObjectParameter("ReferenceNumber", typeof(string));
    
            var businessAddressParameter = businessAddress != null ?
                new ObjectParameter("BusinessAddress", businessAddress) :
                new ObjectParameter("BusinessAddress", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var taxReferenceParameter = taxReference != null ?
                new ObjectParameter("TaxReference", taxReference) :
                new ObjectParameter("TaxReference", typeof(string));
    
            var companyRegNumberParameter = companyRegNumber != null ?
                new ObjectParameter("CompanyRegNumber", companyRegNumber) :
                new ObjectParameter("CompanyRegNumber", typeof(string));
    
            var companyRegAddressParameter = companyRegAddress != null ?
                new ObjectParameter("CompanyRegAddress", companyRegAddress) :
                new ObjectParameter("CompanyRegAddress", typeof(string));
    
            var vatNumberParameter = vatNumber != null ?
                new ObjectParameter("VatNumber", vatNumber) :
                new ObjectParameter("VatNumber", typeof(string));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            var logoUrlParameter = logoUrl != null ?
                new ObjectParameter("LogoUrl", logoUrl) :
                new ObjectParameter("LogoUrl", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var isInvoicedParameter = isInvoiced.HasValue ?
                new ObjectParameter("IsInvoiced", isInvoiced) :
                new ObjectParameter("IsInvoiced", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<InsertUpdateSupplier_Result>("InsertUpdateSupplier", supplierIdParameter, supplierNameParameter, referenceNumberParameter, businessAddressParameter, emailParameter, phoneParameter, taxReferenceParameter, companyRegNumberParameter, companyRegAddressParameter, vatNumberParameter, createdDateParameter, modifiedDateParameter, logoUrlParameter, isActiveParameter, isInvoicedParameter);
        }
    
        public virtual ObjectResult<InsetUpdateMonthly_Invoice_Result> InsetUpdateMonthly_Invoice(Nullable<int> monthlyInvoiceId, Nullable<int> supplierId, string supplierName, Nullable<decimal> hairService, Nullable<decimal> beautyService, Nullable<decimal> custom1, Nullable<decimal> custom2, Nullable<decimal> custom3, Nullable<decimal> custom4, Nullable<decimal> custom5, Nullable<decimal> net, Nullable<decimal> vat, Nullable<decimal> gross, Nullable<decimal> advancePaid, Nullable<decimal> balance, string invoiceReferance, Nullable<bool> isApproved, Nullable<System.DateTime> invoiceDate, Nullable<int> currentYear, Nullable<int> currentMonth, Nullable<bool> isSelected)
        {
            var monthlyInvoiceIdParameter = monthlyInvoiceId.HasValue ?
                new ObjectParameter("MonthlyInvoiceId", monthlyInvoiceId) :
                new ObjectParameter("MonthlyInvoiceId", typeof(int));
    
            var supplierIdParameter = supplierId.HasValue ?
                new ObjectParameter("SupplierId", supplierId) :
                new ObjectParameter("SupplierId", typeof(int));
    
            var supplierNameParameter = supplierName != null ?
                new ObjectParameter("SupplierName", supplierName) :
                new ObjectParameter("SupplierName", typeof(string));
    
            var hairServiceParameter = hairService.HasValue ?
                new ObjectParameter("HairService", hairService) :
                new ObjectParameter("HairService", typeof(decimal));
    
            var beautyServiceParameter = beautyService.HasValue ?
                new ObjectParameter("BeautyService", beautyService) :
                new ObjectParameter("BeautyService", typeof(decimal));
    
            var custom1Parameter = custom1.HasValue ?
                new ObjectParameter("Custom1", custom1) :
                new ObjectParameter("Custom1", typeof(decimal));
    
            var custom2Parameter = custom2.HasValue ?
                new ObjectParameter("Custom2", custom2) :
                new ObjectParameter("Custom2", typeof(decimal));
    
            var custom3Parameter = custom3.HasValue ?
                new ObjectParameter("Custom3", custom3) :
                new ObjectParameter("Custom3", typeof(decimal));
    
            var custom4Parameter = custom4.HasValue ?
                new ObjectParameter("Custom4", custom4) :
                new ObjectParameter("Custom4", typeof(decimal));
    
            var custom5Parameter = custom5.HasValue ?
                new ObjectParameter("Custom5", custom5) :
                new ObjectParameter("Custom5", typeof(decimal));
    
            var netParameter = net.HasValue ?
                new ObjectParameter("Net", net) :
                new ObjectParameter("Net", typeof(decimal));
    
            var vatParameter = vat.HasValue ?
                new ObjectParameter("Vat", vat) :
                new ObjectParameter("Vat", typeof(decimal));
    
            var grossParameter = gross.HasValue ?
                new ObjectParameter("Gross", gross) :
                new ObjectParameter("Gross", typeof(decimal));
    
            var advancePaidParameter = advancePaid.HasValue ?
                new ObjectParameter("AdvancePaid", advancePaid) :
                new ObjectParameter("AdvancePaid", typeof(decimal));
    
            var balanceParameter = balance.HasValue ?
                new ObjectParameter("Balance", balance) :
                new ObjectParameter("Balance", typeof(decimal));
    
            var invoiceReferanceParameter = invoiceReferance != null ?
                new ObjectParameter("InvoiceReferance", invoiceReferance) :
                new ObjectParameter("InvoiceReferance", typeof(string));
    
            var isApprovedParameter = isApproved.HasValue ?
                new ObjectParameter("IsApproved", isApproved) :
                new ObjectParameter("IsApproved", typeof(bool));
    
            var invoiceDateParameter = invoiceDate.HasValue ?
                new ObjectParameter("InvoiceDate", invoiceDate) :
                new ObjectParameter("InvoiceDate", typeof(System.DateTime));
    
            var currentYearParameter = currentYear.HasValue ?
                new ObjectParameter("CurrentYear", currentYear) :
                new ObjectParameter("CurrentYear", typeof(int));
    
            var currentMonthParameter = currentMonth.HasValue ?
                new ObjectParameter("CurrentMonth", currentMonth) :
                new ObjectParameter("CurrentMonth", typeof(int));
    
            var isSelectedParameter = isSelected.HasValue ?
                new ObjectParameter("IsSelected", isSelected) :
                new ObjectParameter("IsSelected", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<InsetUpdateMonthly_Invoice_Result>("InsetUpdateMonthly_Invoice", monthlyInvoiceIdParameter, supplierIdParameter, supplierNameParameter, hairServiceParameter, beautyServiceParameter, custom1Parameter, custom2Parameter, custom3Parameter, custom4Parameter, custom5Parameter, netParameter, vatParameter, grossParameter, advancePaidParameter, balanceParameter, invoiceReferanceParameter, isApprovedParameter, invoiceDateParameter, currentYearParameter, currentMonthParameter, isSelectedParameter);
        }
    
        public virtual int UpdateByIsActive(Nullable<int> supplierId, Nullable<bool> isActive)
        {
            var supplierIdParameter = supplierId.HasValue ?
                new ObjectParameter("SupplierId", supplierId) :
                new ObjectParameter("SupplierId", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateByIsActive", supplierIdParameter, isActiveParameter);
        }
    }
}
